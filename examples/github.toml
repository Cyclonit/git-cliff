# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

# [remote.github]
# owner = "orhun"
# repo = "git-cliff"
# token = ""

[changelog]
# A Tera template to be rendered for each release in the changelog (see https://keats.github.io/tera/docs/#introduction).
body_template = """
## What's Changed

{%- if version %} in {{ version }}{%- endif -%}
{% for commit in commits %}
  {% if commit.github.pr_title -%}
    {%- set commit_message = commit.github.pr_title -%}
  {%- else -%}
    {%- set commit_message = commit.message -%}
  {%- endif -%}
  * {{ commit_message | split(pat="\n") | first | trim }}\
    {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
    {% if commit.github.pr_number %} in \
      [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
    {%- endif %}
{%- endfor -%}

{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  {% raw %}\n{% endraw -%}
  ## New Contributors
{%- endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}

{% if version %}
    {% if previous.version %}
      **Full Changelog**: {{ self::remote_url() }}/compare/{{ previous.version }}...{{ version }}
    {% endif %}
{% else -%}
  {% raw %}\n{% endraw %}
{% endif %}

{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}
"""
# Whether to remove leading and trailing whitespaces from all lines of the changelog's body.
trim_body_whitespace = true
# A Tera template to be rendered as the changelog's footer (see https://keats.github.io/tera/docs/#introduction).
footer_template = """
<!-- generated by git-cliff -->
"""
# A list of postprocessors using regex to modify the changelog.
postprocessors = []
# Whether to exclude changes that do not belong to any group from the changelog.
exclude_ungrouped_changes = false

[release]
# Regex to select git tags that represent releases.
# Example: "v[0-9].*"
tags_pattern = "v[0-9].*"
# Regex to select git tags that do not represent proper releases. Takes precedence over `release.tags_pattern`.
# Changes belonging to these releases will be included in the next non-skipped release.
# Example: "rc"
skip_tags_pattern = "rc"
# Whether to order releases chronologically or topologically.
# Must be either `time` or `topology`.
order_by = "time"

[commit]
# Whether to parse commits according to the conventional commits specification (see https://www.conventionalcommits.org).
# Sets the commits' `group` (= `type`), `scope`, `message` (= `description`), `body`, `breaking`, `breaking_description` and `footers`.
parse_conventional_commits = false
# Whether to exclude commits that do not match the conventional commits specification from the changelog.
exclude_unconventional_commits = true
# Whether to split commits on newlines, treating each line as an individual commit.
split_by_newline = false
# A list of preprocessors to modify commit messages using regex prior to further processing.
message_preprocessors = [
  # remove issue numbers from commits
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
# Whether to prevent breaking changes from being excluded by commit parsers.
retain_breaking_changes = false
# Regex to select git tags that should be excluded from the changelog.
exclude_tags_pattern = "beta|alpha"
# Whether to order commits newest to oldest or oldest to newest in their group.
# Must be either `newest` or `oldest`.
sort_order = "newest"
