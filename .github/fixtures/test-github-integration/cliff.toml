[remote.github]
owner = "orhun"
repo = "git-cliff-readme-example"

[changelog]
# A Tera template to be rendered for each release in the changelog (see https://keats.github.io/tera/docs/#introduction).
body_template = """
## What's Changed

{%- if version %} in {{ version }}{%- endif -%}
{% for commit in commits %}
  * {{ commit.message | split(pat="\n") | first | trim }}\
    {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
    {% if commit.github.pr_number %} in #{{ commit.github.pr_number }}{%- endif %}
{%- endfor -%}

{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  {% raw %}\n{% endraw -%}
  ## New Contributors
{%- endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution in #{{ contributor.pr_number }}
{%- endfor -%}

{% if version %}
    {% if previous.version %}
      **Full Changelog**: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/compare/{{ previous.version }}...{{ version }}
    {% endif %}
{% else -%}
  {% raw %}\n{% endraw %}
{% endif %}
"""
# Whether to remove leading and trailing whitespaces from all lines of the changelog's body.
trim_body_whitespace = true
# A Tera template to be rendered as the changelog's footer (see https://keats.github.io/tera/docs/#introduction).
footer_template = """
<!-- generated by git-cliff -->
"""

[commit]
# Whether to parse commits according to the conventional commits specification.
# Sets the commits' `group` (= `type`), `scope`, `message` (= `description`), `body`, `breaking`, `breaking_description` and `footers`.
parse_conventional_commits = false
# Whether to exclude commits that do not match the conventional commits specification from the changelog.
exclude_unconventional_commits = true
# Whether to split commits on newlines, treating each line as an individual commit.
split_by_newline = false
# A list of preprocessors to modify commit messages using regex prior to further processing.
message_preprocessors = [{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" }]
# Whether to prevent breaking changes from being excluded by commit parsers.
retain_breaking_changes = false
