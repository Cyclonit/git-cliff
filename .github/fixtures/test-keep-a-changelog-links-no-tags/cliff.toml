[changelog]
# A static header for the changelog.
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# A Tera template to be rendered for each release in the changelog (see https://keats.github.io/tera/docs/#introduction).
body_template = """
{% if version %}\
    {% if previous %}\
      {% if previous.version %}\
          ## [{{ version | trim_start_matches(pat="v") }}](https://github.com/dummy/dummy/compare/{{ previous.version }}...{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
      {% else %}\
          ## [{{ version | trim_start_matches(pat="v") }}](https://github.com/dummy/dummy/releases/tag/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
      {% endif %}\
    {% endif %}\
{% else %}\
    {% if previous %}\
      {% if previous.version %}\
          ## [Unreleased](https://github.com/dummy/dummy/compare/{{ previous.version }}...HEAD)
      {% else %}\
          ## [Unreleased]
      {% endif %}\
    {% else %}\
        ## [Unreleased]
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# Whether to remove leading and trailing whitespaces from all lines of the changelog's body.
trim_body_whitespace = true
# A Tera template to be rendered as the changelog's footer (see https://keats.github.io/tera/docs/#introduction).
footer_template = """
<!-- generated by git-cliff -->
"""
# Whether to exclude changes that do not belong to any group from the changelog.
exclude_ungrouped_changes = true

[release]
# Regex to select git tags that represent releases.
# Example: "v[0-9].*"
tags_pattern = "v[0-9].*"
# Regex to select git tags that do not represent proper releases. Takes precedence over `release.tags_pattern`.
# Changes belonging to these releases will be included in the next non-skipped release.
# Example: "rc"
skip_tags_pattern = ""
# Whether to order releases chronologically or topologically.
# Must be either `time` or `topology`.
order_by = "time"

[commit]
# Whether to parse commits according to the conventional commits specification.
# Sets the commits' `group` (= `type`), `scope`, `message` (= `description`), `body`, `breaking`, `breaking_description` and `footers`.
parse_conventional_commits = true
# Whether to exclude commits that do not match the conventional commits specification from the changelog.
exclude_unconventional_commits = true
# Whether to split commits on newlines, treating each line as an individual commit.
split_by_newline = false
# A list of parsers using regex for extracting data from the commit message.
# Sets the commits' `group` and `scope` and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^.*: add", group = "Added" },
    { message = "^.*: support", group = "Added" },
    { message = "^.*: remove", group = "Removed" },
    { message = "^.*: delete", group = "Removed" },
    { message = "^test", group = "Fixed" },
    { message = "^fix", group = "Fixed" },
    { message = "^.*: fix", group = "Fixed" },
    { message = "^.*", group = "Changed" },
]
# Whether to prevent breaking changes from being excluded by commit parsers.
retain_breaking_changes = false
# Regex to select git tags that should be excluded from the changelog.
exclude_tags_pattern = "v0.1.0-beta.1"
# Whether to order commits newest to oldest or oldest to newest in their group.
# Must be either `newest` or `oldest`.
sort_order = "oldest"
